from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.jobstores.memory import MemoryJobStore
from aiogram import Bot
import pytz
import asyncio
import sqlite3

class NotificationManager:
    def __init__(self, token: str, database):
        self.bot = Bot(token=token)
        self.db = database
        self.scheduler = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ–∑–∂–µ
    
    async def init_scheduler(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if self.scheduler is None:
            jobstores = {
                'default': MemoryJobStore()
            }
            
            self.scheduler = AsyncIOScheduler(
                jobstores=jobstores,
                timezone=pytz.UTC
            )
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ 60 —Å–µ–∫—É–Ω–¥
            self.scheduler.add_job(
                self.check_notifications,
                'interval',
                seconds=60,  # –ë—ã–ª–æ 30, —Å—Ç–∞–ª–æ 60
                id='check_notifications',
                replace_existing=True,
                next_run_time=datetime.now(pytz.UTC),
                misfire_grace_time=30  # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –≤—Ä–µ–º—è –æ–ø–æ–∑–¥–∞–Ω–∏—è
            )
            
            self.scheduler.start()
    
    def schedule_notifications(self, user_id: int, event: dict, user_timezone: str = 'UTC', reminder_id: int = None):
        try:
            event_time = datetime.strptime(event["datetime"], "%Y-%m-%d %H:%M")
            event_time = pytz.UTC.localize(event_time)
            current_time = datetime.now(pytz.UTC)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω
            notify_times = [
                (event_time, "MAIN_EVENT", "–ø—Ä—è–º–æ —Å–µ–π—á–∞—Å", True),  # –û—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                (event_time - timedelta(days=3), "REMINDER", "–∑–∞ 3 –¥–Ω—è", False),
                (event_time - timedelta(days=2), "REMINDER", "–∑–∞ 2 –¥–Ω—è", False),
                (event_time - timedelta(days=1), "REMINDER", "–∑–∞ —Å—É—Ç–∫–∏", False),
                (event_time - timedelta(hours=2), "REMINDER", "–∑–∞ 2 —á–∞—Å–∞", False)
            ]
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –±—É–¥—É—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            future_notifications = [
                (notify_time, notif_type, description, is_main) 
                for notify_time, notif_type, description, is_main in notify_times 
                if notify_time > current_time
            ]
            
            if not future_notifications:
                print("–ù–µ—Ç –±—É–¥—É—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
                return
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π reminder_id –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            if reminder_id is None:
                reminder_id = self.db.save_reminder(
                    user_id,
                    event["description"],
                    event["datetime"]
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            for notify_time, notif_type, description, is_main in future_notifications:
                self.db.save_notification(
                    reminder_id,
                    user_id,
                    notify_time.strftime("%Y-%m-%d %H:%M"),
                    event["description"],
                    description,
                    is_main,
                    notif_type
                )
                print(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {notif_type} –Ω–∞ {notify_time}")
                print(f"–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, reminder_id {reminder_id}")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {str(e)}")
            raise
    
    async def check_notifications(self):
        try:
            current_time = datetime.now(pytz.UTC)
            print(f"\n{'='*50}")
            print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ {current_time}")
            
            # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            self.db.debug_notifications()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            try:
                notifications = self.db.get_pending_notifications()
                print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î")
            except Exception as db_error:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –ë–î: {str(db_error)}")
                return

            if notifications:
                print(f"üì¨ –ù–∞–π–¥–µ–Ω–æ {len(notifications)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
                
                for notification in notifications:
                    (notification_id, user_id, description, event_datetime, 
                     notify_datetime, timing, user_timezone) = notification
                    
                    print(f"\nüìå –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {notification_id}:")
                    print(f"üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
                    print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
                    print(f"üìÖ –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è: {event_datetime}")
                    print(f"‚è∞ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notify_datetime}")
                    print(f"‚ÑπÔ∏è –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {timing}")
                    print(f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {user_timezone}")
                    
                    try:
                        print("‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
                        await self.send_notification(
                            user_id,
                            {"description": description, "datetime": event_datetime},
                            user_timezone or 'UTC',
                            timing
                        )
                        
                        # –ü–æ–ª—É—á–∞–µ–º reminder_id –¥–ª—è —ç—Ç–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                        with sqlite3.connect(self.db.db_path) as conn:
                            cursor = conn.cursor()
                            cursor.execute("""
                                SELECT reminder_id FROM notifications
                                WHERE id = ?
                            """, (notification_id,))
                            result = cursor.fetchone()
                            if result:
                                reminder_id = result[0]
                                
                                if timing == "–ø—Ä—è–º–æ —Å–µ–π—á–∞—Å":
                                    # –ï—Å–ª–∏ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, —É–¥–∞–ª—è–µ–º –≤—Å—ë
                                    self.db.delete_reminder_with_notifications(reminder_id)
                                    print(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id} —É–¥–∞–ª–µ–Ω–æ –≤–º–µ—Å—Ç–µ —Å–æ –≤—Å–µ–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏")
                                else:
                                    # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ
                                    cursor.execute("""
                                        DELETE FROM notifications 
                                        WHERE id = ?
                                    """, (notification_id,))
                                    conn.commit()
                                    print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification_id} —É–¥–∞–ª–µ–Ω–æ")
                        
                        print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                        
                    except Exception as send_error:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(send_error)}")
            else:
                print("üì≠ –ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            
            print(f"{'='*50}\n")
                    
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {str(e)}")
    
    async def send_notification(self, user_id: int, event: dict, user_timezone: str, timing: str):
        try:
            event_time = datetime.strptime(event["datetime"], "%Y-%m-%d %H:%M")
            event_time = pytz.UTC.localize(event_time)
            local_tz = pytz.timezone(user_timezone)
            local_time = event_time.astimezone(local_tz)
            
            formatted_date = local_time.strftime("%d.%m.%Y")
            formatted_time = local_time.strftime("%H:%M")
            
            if timing == "–ø—Ä—è–º–æ —Å–µ–π—á–∞—Å":
                message = (
                    f"–í–Ω–∏–º–∞–Ω–∏–µ! –°–æ–±—ã—Ç–∏–µ *{event['description']}* –Ω–∞—á–∞–ª–æ—Å—å! "
                    f"–¢–æ—á–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: *{formatted_date}* *{formatted_time}*."
                )
            elif "—á–∞—Å–∞" in timing:
                hours = "2"
                message = (
                    f"–í–Ω–∏–º–∞–Ω–∏–µ! –°–æ–±—ã—Ç–∏–µ *{event['description']}* –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ "
                    f"*{hours}* —á–∞—Å–∞, –∞ –∏–º–µ–Ω–Ω–æ *{formatted_date}* *{formatted_time}*."
                )
            elif any(word in timing for word in ["–¥–Ω—è", "—Å—É—Ç–∫–∏"]):
                if "—Å—É—Ç–∫–∏" in timing:
                    days = "1"
                else:
                    days = timing.split()[1]
                    
                message = (
                    f"–í–Ω–∏–º–∞–Ω–∏–µ! –°–æ–±—ã—Ç–∏–µ *{event['description']}* –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ "
                    f"*{days}* {'–¥–µ–Ω—å' if days == '1' else '–¥–Ω—è' if days in ['2', '3'] else '–¥–Ω–µ–π'}, "
                    f"–∞ –∏–º–µ–Ω–Ω–æ *{formatted_date}* *{formatted_time}*."
                )
            
            await self.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
            raise